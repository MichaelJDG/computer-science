// filename   : Prog05.cpp// Author     : Michael Gutierrez, Cs 116 TR// input      : data from num.data    // processing : add to data, find max, min and average, sort data// output     : print to scrren data after additions , max min, avg, above 100, and sorted data// Preprocesser Directives#include <fstream>    // For input and output file streams#include <string>     // For string data types#include <iostream> // for getline(), outData, cinusing namespace std; // Declare function prototypesvoid getData(ifstream& inData,int num[][10]);void addOne(int num[][10]);void addToOddIndex (int num[][10]);void printData(int num[][10], ofstream &outData);void findMaxMin(int num[][10], int & max, int & min);float findAvg(int num[][10]);void printMaxMinAvg(int max, int min, float avg, ofstream &outData);void findPrintMoreThan100(int num[][10], ofstream &outData);void selSort(int num[][10]);void printsortData(int num[][10], ofstream &outData);int main () {  // Declare and open files  ifstream inData;	  ofstream outData; // declare infile object  inData.open("in.data"); 	// open infile  outData.open("out.data");   // open outfile    // Declare variables   int num[10][10];  int max =0;  int min = 999999;  float avg =0;   // Call functions  getData(inData,num);  addOne(num);  addToOddIndex(num);  printData(num,outData);  findMaxMin(num,max,min);  avg = findAvg(num);  printMaxMinAvg(max,min,avg,outData);  findPrintMoreThan100(num,outData);  selSort(num);  printsortData(num, outData);}// pre: Array has beeen declared and infile is oppened// post: Data inputed into array void getData(ifstream& inData, int num[][10] ){   int temp =0 ;    int i,j;       for (i =0; i < 10 ; i++)   {       inData >> temp;       for (j=0; j <10; j++)       {           num[i][j] = temp;       }   }}// pre: Data inputed into array// post: All even elements incremented by 1void addOne(int num[][10]){  int p,q;  for (p=0; p <10; p++)  {       for(q=0; q <10; q++)       {           if ((num[p][q] % 2)== 0)            {              num[p][q]= num[p][q] + 1;            }       }   }}// pre: Data in array and incremented by 1// post: All odd index rows elements incremented by 2void addToOddIndex( int num[][10]){   int p,q;  for (p= 1; p <10; p = p+ 2)  {       for(q=0; q <10; q++)       {                         num[p][q]= num[p][q] + 2;                   }   }}// pre: All data inputed and incremented or sorted// post: Print data to screenvoid printData(int num[][10],ofstream &outData){ int p,q;  for (p=0; p <10; p++)  {      outData <<endl;       for(q=0; q <10; q++)       {           outData << num[p][q] << " ";       }   }}// pre: Data printed to screen// post: Max and Min found from data and storedvoid findMaxMin(int num[][10], int & max, int & min){   int p,q;  for (p=0; p <10; p++)  {       for(q=0; q <10; q++)       {          if (num[p][q] > max) max = num[p][q];          if (num[p][q] < min) min = num[p][q];       }   } }// pre: Max and min found from data// post: Avg of all data found and storedfloat findAvg(int num[][10]){ float temp = 0;  double keep=0; int p,q;  for (p=0; p <10; p++)  {       for(q=0; q <10; q++)       {          keep = keep + num[p][q];       }   }   temp = keep / 100;  return temp; }// pre: Avg,max,and min found and stored // post:Max min, and avg printed in format to screenvoid printMaxMinAvg(int max, int min, float avg,ofstream &outData){    outData << endl << endl;     outData << "Max: " << max << endl;     outData << "Min: " << min << endl;     outData << "Avg: " << avg << endl;}// pre: Previouse found data printed to screen// post: Find all elements above 100 and print number to screen in formatvoid findPrintMoreThan100( int num[][10],ofstream &outData){    outData << endl << "*--<Values greater than 100>--*" << endl;    int p;    for(p=0; p <10; p++)    {       if(num[p][0] > 100)        {           outData<< num[p][0] << endl;       }    }}// pre: All previouse found data printed to screen// post: All data sorted in columns from low to highvoid selSort(int num[][10]){int x =0 ;    for (int k = 0; k < 10; k++)    {        for (int m = 0; m < 10; m++)        {            x = m+1;            for (int i = k; i < 10 ; i++)            {                for (int j = x; j < 10; j++)                {                    if (num [k][m] > num [i][j])                        swap(num [k][m] ,num [i][j]);                }                x=0;            }         }    }}// pre: All previouse found data sorted from low to high// post: All data printed from low to high by column void printsortData(int num[][10],ofstream &outData){    int p,q;  for (q=0; q <10; q++)  {      outData <<endl;       for(p=0; p <10; p++)       {           outData << num[p][q] << " ";       }   } }