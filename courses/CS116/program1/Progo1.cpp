// filename   : Progo1.cpp// Author     : Michael Gutierrez, Cs 116 TR// Input      : in.data// Processing : Read a record from an Input file and rights a report to an output file// Output     : out.data/*Problem :Read data from input file and write output file: a formatted report.Design:1 Preprocessor directives2 declare and open files3 declare variables4 read values from input file into variables5 validate input data- Set valid to true- If patient ID < 1111-    Set valid to false- If patient ID > 9999-    Set valid to false6 Compute average exam score and positive/ negative/ risk rating7 print report header8 print report detail9 print report footer*/// Preprocesser Directives#include <fstream>    // For input and output file streams#include <string>     // For string data types#include <iomanip>    // for setw(), set precision#include <iostream>   // for endl, fixedusing namespace std;  // to make code more readable (no "std::" prefix)void printHeader (ofstream& outData); // Function prototype, Declaring a functionvoid printDetail (ofstream& outData); // Function prototype   // Declare Variables   string patientName = "";   int patientID = 0;   float exam1 = 0;   float exam2 = 0;   float exam3 = 0;   float avg = 0;   string posneg = "";   bool valid = true;int main(){    // Declare and open files    ifstream inData;		    // declare infile object    ofstream outData;		    // declare outfile object    inData.open("in.data"); 	// open infile    outData.open("out.data");   // open outfile    // Read values from input file into variables    inData >> patientName >> patientID >> exam1 >> exam2 >> exam3;    // Validate input data    if (patientID< 1111 || patientID > 9999) valid = false;    if (exam1< 0 || exam1 > 100) valid = false;    if (exam2< 0 || exam2 > 100) valid = false;    if (exam3< 0 || exam3 > 100) valid = false;    // Comput average exam score and pos/ neg/ risk rating    avg = (exam1 + exam2 + exam3) / 3;    if (avg > 70)    {      if (avg>=97) posneg = "Pos / RISK";      else posneg = "Pos";    }    else posneg = "Neg";    // print report header    printHeader(outData);    // print report detail    printDetail(outData);    // Print report footer    outData << endl << "*< end of report>*";}void printHeader (ofstream& outData){   outData << "*~~< Patient Exam Report >~~*" << endl << endl;   outData << setfill (' ') << setw(12) << left <<"Name";   outData << setfill (' ') << setw(11) << left <<"PatientID";   outData << setfill (' ') << setw(9) << left <<"Exam 1";   outData << setfill (' ') << setw(9) << left <<"Exam 2";   outData << setfill (' ') << setw(9) << left <<"Exam 3";   outData << setfill (' ') << setw(9) << left <<"Average";   outData << setfill (' ') << setw(9) << left <<"Pos/Neg";   outData << endl;   outData << setfill (' ') << setw(12) << left <<"----";   outData << setfill (' ') << setw(11) << left <<"---------";   outData << setfill (' ') << setw(9) << left <<"------";   outData << setfill (' ') << setw(9) << left <<"------";   outData << setfill (' ') << setw(9) << left <<"------";   outData << setfill (' ') << setw(9) << left <<"-------";   outData << setfill (' ') << setw(9) << left <<"-------";   outData << endl;}void printDetail (ofstream& outData){   outData << setprecision(2) << fixed;   outData << setfill (' ') << setw(12) << left << patientName;   outData << setfill (' ') << setw(11) << left << patientID;   outData << setfill (' ') << setw(9) << left << exam1;   outData << setfill (' ') << setw(9) << left << exam2;   outData << setfill (' ') << setw(9) << left << exam3;   if (valid)   {     outData << setfill (' ') << setw(9) << left << avg;     outData << setfill (' ') << setw(9) << left << posneg;   }   else  outData << setw(20) << "~~ Invalid data ~~";   outData << endl;}