// filename   : Prg02.cpp// Author     : Michael Gutierrez, Cs 116 TR// Input      : in.data// Processing : Read a record from an Input file and rights a report and summary to an output file// Output     : out.data/*Problem :Read data from input file and write output file: a formatted report and summary with histogram.Design:1 Preprocessor directives2 declare and open files3 declare variables4 print report header5 read values from input file into variables6 validate input data- Set valid to true- If patient ID < 1111-    Set valid to false- If patient ID > 9999-    Set valid to false- If Exam score <0.00-    Set valid to false-if Exam score >100.00-    Set valid to false7 Tally valid or invalid8 Determine male or female and add to tally9 Determine average score, and determine color risk level and add to tally for that color10 Determine if score is max or min11 print report detail12 repeat 5-12 for all data13 Find percentage of male, female, valid, invalid14 create report summary15 print summary header16 create and print histogram for color risks17 print remaining report summary18 print report footer*/// Preprocesser Directives#include <fstream>    // For input and output file streams#include <string>     // For string data types#include <iomanip>    // for setw(), set precision#include <iostream>   // for endl, fixedusing namespace std;  // to make code more readable (no "std::" prefix)void printHeader (ofstream& outData); // Function prototype, Declaring a functionvoid printDetail (ofstream& outData); // Function prototypevoid reportsummary (ofstream& outData); // Function prototype    // Declare Variables    string patientName = "";    int patientID = 0;    float exam1 = 0;    float exam2 = 0;    float exam3 = 0;    float avg = 0;    string gender = "";    string riskvalue = "";    bool valid = true;    int green = 0;    int blue = 0;    int yellow = 0;    int red = 0;    int orange = 0;    double validnum = 0;    double percentvalid = 0;    double invalidnum = 0;    double percentinvalid = 0;    double male = 0;    double percentmale = 0;    double female = 0;    double percentfemale = 0;    double maxavg = 0.00;    double minavg = 100.00;    int maxid = 0;    int minid = 0;    string tempstring ="";    int main(){    // Declare and open files    ifstream inData;		    // declare infile object    ofstream outData;		    // declare outfile object    inData.open("in.data"); 	// open infile    outData.open("out.data");   // open outfile        // print report header    printHeader(outData);          while (inData >> patientName >> patientID >> gender >> exam1 >> exam2 >> exam3)  {    // Read values from input file into variables    //inData >> patientName >> patientID >> gender >> exam1 >> exam2 >> exam3;            // Validate input data    valid = true;    if (patientID< 1111 || patientID > 9999) valid = false;    if (exam1< 0 || exam1 > 100) valid = false;    if (exam2< 0 || exam2 > 100) valid = false;    if (exam3< 0 || exam3 > 100) valid = false;        // Tally if valid or invalid    if (valid) validnum +=1;    else invalidnum +=1;       //  Determin Male or Female and tally   if (valid)   {     if (gender == "F") female +=1;   else male +=1;   }   //  Determine average score, and determine color risk level, and add to tally for that color  if (valid)  {   avg = (exam1 + exam2 + exam3) / 3;   if (avg >= 0 and avg <= 70) riskvalue = "GREEN", green +=1;   if (avg > 70 and avg <= 78) riskvalue = "BLUE", blue +=1;   if (avg > 78 and avg <= 88) riskvalue = "YELLOW", yellow +=1;   if (avg > 88 and avg <= 97) riskvalue = "ORANGE", orange +=1;   if (avg > 97 and avg <= 100) riskvalue = "RED", red +=1;  }     // Determine if score is max or min   if (valid)   {   if (avg > maxavg)    {   maxavg = avg;    maxid = patientID;   }   if (avg < minavg)   {   minavg = avg;    minid = patientID;   }   }      // print report detail    printDetail(outData);  }   // Find percentage of male, female, valid, invalid    percentmale = (male/(male + female))*100;    percentfemale = (female/(male + female))*100;    percentvalid = (validnum/(validnum + invalidnum))*100;    percentinvalid = (invalidnum/(validnum + invalidnum))*100;      // Create report summary    reportsummary(outData);       // Print report footer    outData << endl << "*< end of report>*";}void reportsummary(ofstream& outData){   outData << setprecision(2) << fixed;   // Print Summary Header   outData << endl <<endl;   outData << "Summary"<< endl << endl;      // create and print histogram for color risks   outData << "RED     :" ;   for (int i = 0 ; i < red; i++) tempstring += "*";   outData << tempstring << endl;      tempstring = "";   outData << "ORANGE  :" ;   for (int i = 0 ; i < orange; i++) tempstring += "*";   outData << tempstring << endl;      tempstring = "";   outData << "YELLOW  :" ;   for (int i = 0 ; i < yellow; i++) tempstring += "*";   outData << tempstring << endl;      tempstring = "";   outData << "BLUE    :" ;   for (int i = 0 ; i < blue; i++) tempstring += "*";   outData << tempstring << endl;      tempstring = "";   outData << "GREEN   :" ;   for (int i = 0 ; i < green; i++) tempstring += "*";   outData << tempstring << endl <<endl ;      // print remaining Report summary   outData << "Female  : " << setprecision(2) << fixed << percentfemale << "% (" << setprecision(0) << fixed << female << " valid records)" << endl;   outData << "Male    : " << setprecision(2) << fixed << percentmale << "% (" << setprecision(0) << fixed << male << " valid records)" << endl << endl;   outData << "Valid   : " << setprecision(2) << fixed << percentvalid << "% (" << setprecision(0) << fixed << validnum << " records)" << endl;   outData << "Invalid : " << setprecision(2) << fixed << percentinvalid << "% (" << setprecision(0) << fixed << invalidnum << " records)" << endl <<endl;   outData << "Max     : " << setprecision(2) << fixed << maxavg << " (PatientID:" << maxid << ")" << endl;   outData << "Min     : " << setprecision(2) << fixed << minavg << " (PatinetID:" << minid << ")" << endl << endl;}void printHeader (ofstream& outData){   outData << "*~~< Patient Exam Report >~~*" << endl << endl;   outData << setfill (' ') << setw(12) << left <<"Name";   outData << setfill (' ') << setw(11) << left <<"Pat.";   outData << setfill (' ') << setw(9) << left <<"M/F";   outData << setfill (' ') << setw(9) << left <<"Exam 1";   outData << setfill (' ') << setw(9) << left <<"Exam 2";   outData << setfill (' ') << setw(9) << left <<"Exam 3";   outData << setfill (' ') << setw(9) << left <<"AVG";   outData << setfill (' ') << setw(13) << left <<"Risk Level";   outData << endl;      outData << setfill (' ') << setw(12) << left <<"----";   outData << setfill (' ') << setw(11) << left <<"----";   outData << setfill (' ') << setw(9) << left <<"---";   outData << setfill (' ') << setw(9) << left <<"------";   outData << setfill (' ') << setw(9) << left <<"------";   outData << setfill (' ') << setw(9) << left <<"------";   outData << setfill (' ') << setw(9) << left <<"---";   outData << setfill (' ') << setw(13) << left <<"----------";   outData << endl;}void printDetail (ofstream& outData){   outData << setprecision(2) << fixed;   outData << setfill (' ') << setw(12) << left << patientName;   outData << setfill (' ') << setw(11) << left << patientID;   outData << setfill (' ') << setw(9) << left << gender;   outData << setfill (' ') << setw(9) << left << exam1;   outData << setfill (' ') << setw(9) << left << exam2;   outData << setfill (' ') << setw(9) << left << exam3;   if (valid)   {     outData << setfill (' ') << setw(9) << left << avg;     outData << setfill (' ') << setw(13) << left << riskvalue;   }   else  outData << setw(23) << "~~ Invalid data ~~";   outData << endl; }