//**************************************************************************** // Author : Michael Gutierrez// Course Title : Computer Programming II // Course Number : CS216// Class Meets : M W / 8:30 - 10:20// Prof Name : Moe Bidgoli// Assignment Number : #11// Due Date : 11-23-15// Possible Points : 20// Purpose :To do a binary, sequential,hashing and double hashing search // to find the ASL for succesfulcand unsuccesful.//**************************************************************************** #include <sstream>#include <fstream> #include <iostream> #include <string> #include <iomanip> #include "Search.h"using namespace std; int main() {        float sequentialpass, sequentialfail, binpass, binfail, hashpass,hashfail, dhashpass, dhashfail;    ifstream inFile;    ofstream outFile;        inFile.open("in.data");    outFile.open("out.data");        if(inFile.fail() || outFile.fail() )    {        cout << "Input file or output file opening failed" << endl;        return 1;    }	Search list;	int compare[20];	int compareFail[20];	float comp;	float avg;	bool found = false;		list.readRd(inFile);	list.sequentialList(compare);	list.failList(compareFail);	outFile << "<<<***Successful Sequential Search***>>>" << endl <<endl;	outFile << "ID        Number of Comparison" << endl;	outFile << "-----      --------------------"<< endl;			for(int i = 0; i<20 ; i++)	{		comp =0;		outFile << compare[i] << "          ";		list.sequintialSearchPass(comp,compare[i]);		outFile<<comp << endl; 		avg = avg +comp;	}		avg = (avg/20);	sequentialpass = avg;	outFile << fixed << showpoint;	outFile << setprecision(2);	outFile << "Average Number of probes: " << avg << endl << endl;		outFile << "<<<***Unsuccessful Sequential Search***>>>" << endl<< endl;	outFile << "ID        Number of Comparison" << endl;	outFile << "-----      --------------------"<< endl;		outFile << fixed << noshowpoint;	outFile << setprecision(0);	avg = 0;    for(int i = 0; i<20 ; i++)	{		comp =0;		outFile << compareFail[i] << "          ";		list.sequintialSearchFail(comp,compareFail[i]);		outFile<<comp << endl; 		avg = avg +comp;	}		avg = (avg/20);	sequentialfail = avg;	outFile << fixed << showpoint;	outFile << setprecision(2);	outFile << "Average Number of probes: " << avg << endl << endl;		int numvalues = 20;	list.BubbleSort(numvalues);				outFile << "<<<***Successful Binary Search***>>>"<< endl <<endl;	outFile << "ID        Number of Comparison" << endl;	outFile << "-----      --------------------"<< endl;		outFile << fixed << noshowpoint;	outFile << setprecision(0);	avg = 0;    for(int i = 0; i<20 ; i++)	{		comp =0;		outFile << compare[i] << "          ";		list.BinSearch(compare[i],20, found, comp);		outFile<<comp << endl; 		avg = avg +comp;	}		avg = (avg/20);	binpass = avg;	outFile << fixed << showpoint;	outFile << setprecision(2);	outFile << "Average Number of probes: " << avg << endl << endl;			outFile << "<<<***Unsuccessful Binary Search***>>>"<< endl <<endl;	outFile << "ID        Number of Comparison" << endl;	outFile << "-----      --------------------"<< endl;		outFile << fixed << noshowpoint;	outFile << setprecision(0);	avg = 0;    for(int i = 0; i<20 ; i++)	{		comp =0;		outFile << compareFail[i] << "          ";		list.BinSearch(compareFail[i],20, found, comp);		outFile<<comp << endl; 		avg = avg +comp;	}		avg = (avg/20);	binfail = avg;	outFile << fixed << showpoint;	outFile << setprecision(2);	outFile << "Average Number of probes: " << avg << endl << endl;		int hashing[40];	int doubleHashing[40]; 		for(int i= 0; i<41; i++)	{		hashing[i]= -1;		doubleHashing[i]= -1;	}		for (int i =0; i<20 ; i++)	{		int modnum = 0;		modnum = (compare[i]%37);		while(hashing[modnum] != -1)		{			int count =0;			count++;			modnum++;			if(modnum == 40)			{				modnum = 0;			}			if (count == 40)			{				break;			}		}		hashing[modnum] = compare[i];	}			for (int i =0; i<20 ; i++)	{		int modnum = 0;		modnum = (((compare[i]%37)+((0)*(compare[i]%36)+1))%37);		int count =0;		while(doubleHashing[modnum] != -1)		{			count++;			modnum = (((compare[i]%37)+((count)*(compare[i]%36)+1))%37);						if (count == 40)			{				break;			}		}		doubleHashing[modnum] = compare[i];	}		outFile << fixed << noshowpoint;	outFile << setprecision(0);	outFile << "Storing with Division Method/Hash Table		Storing with Double Hashing Method/Hash Table"<< endl<< endl;	outFile << "Array Index       ID						Array Index        ID"<< endl;	outFile << "---------------   -----					    ----------------   -----" << endl;		for (int i= 0 ; i <41; i++)	{       outFile << "     "<<setw(2) << i <<"                                  " << setw(4) << hashing[i] << "                   "<<setw(2) 	   << i << "              " << setw(4) << doubleHashing[i] << endl;	}  	outFile << endl; 		list.hashingSearch(compare, compareFail, hashing, outFile, avg, comp, hashfail, hashpass);	outFile << fixed << noshowpoint;	outFile << setprecision(0);	list.doublehashingSearch(compare, compareFail, doubleHashing, outFile, avg, comp,dhashfail, dhashpass);	outFile << fixed << showpoint;	outFile << setprecision(2);	outFile <<"S u m m a r y  R e p o r t" << endl <<endl;	outFile <<"--------------------------" << endl <<endl;	outFile << "**** ASL for Successful Search  ****" << endl <<endl;	outFile << "Sequential	Binary		Hashing Division   Double Hashing"<< endl; 	outFile << "---------------------------------------------------------"<< endl;	outFile << "  "<<setw(4)<<sequentialpass << binpass<< "  "<<setw(4)<< hashpass << "  "<<setw(4)<< dhashpass<< endl<< endl;	outFile << "**** ASL for Unsuccessful Search ****" << endl <<endl;	outFile << "Sequential	Binary		Hashing Division   Double Hashing"<< endl; 	outFile << "---------------------------------------------------------"<< endl;	outFile << "  "<<setw(4)<<sequentialfail << binfail<< "  "<<setw(4)<< hashfail << "  "<<setw(4)<< dhashfail<< endl<< endl;	outFile << "*~ END ~*"; }	   