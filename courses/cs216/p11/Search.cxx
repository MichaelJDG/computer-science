#include <fstream> #include <iostream> #include <string> #include <iomanip>#include <sstream>#include "Search.h"using namespace std;void Search::BinSearch(int item, int length, bool& found, float& comp) {    int first = 0;             	    int last = length - 1;     	    int middle;                	    found = false;	int index;    while (last >= first && !found)    {        middle = (first + last) / 2;        if (item < list[middle])		{			comp++;            last = middle - 1;		}	        else if (item > list[middle])		{				comp = comp + 2 ;            first = middle + 1;        }        else		{			   comp = comp + 2 ;	           found = true;		}       }    index = middle;}void Search::sequintialSearchPass(float& comp, int compare){	for (int i = 0; i<20;i++)	  {		comp++; 		if (list[i] == compare) break;	  }  }void Search::sequintialSearchFail(float& comp, int compareFail){	for (int i = 0; i<20;i++)	  {		comp++; 		if (list[i] == compareFail) break;	  }  }void  Search::BubbleSort  (int numValues)		//  Post: Sorts array values[0 . . numValues-1 ] into ascending order by key{	int  current = 0  ;	while  ( current < numValues - 1 )		{	    BubbleUp (current , numValues - 1 ) ;		current++ ;    }       }void Search::BubbleUp  (int  start ,  int end )		//  Post: Neighboring elements that were out of order have been//            swapped between values [start] and  values [end],//            beginning at values [end].{	for  ( int  index = end ;  index > start ; index-- )		       if  (list[ index ] < list[ index - 1 ] )		   {			  int temp =  list[index];			  list[index] = list[ index - 1 ];		      list[ index - 1 ] = temp;		   }             } void Search::readRd (ifstream& inFile){	for(int i =0; i <40; i++)	  {		   inFile >> data[i];	  }}void Search::sequentialList (int compare[]){	for (int i =0; i<20 ; i++)	  {		list[i] = data[i];		compare[i] = data[i];	  }	}void Search::failList (int compareFail[]){	int j =0;	for (int i = 20; i<40 ; i++)	  {		     compareFail[j] = data[i];			 j++;	  }}void Search::hashingSearch(int compare[], int compareFail[], int hashing[],  ofstream& outFile, float& avg, float& comp, float&hashfail, float& hashpass){	avg = 0;	outFile << "<<<***Succ/Division Method***>>>" << endl << endl;	outFile << "ID        Number of Comparison" << endl;	outFile << "-----      --------------------"<< endl;		for (int i =0; i<20 ; i++)	{		comp =0;		outFile << compare[i] << "          ";				int modnum = 0;		modnum = (compare[i]%37);		comp++;		int count =0;		while(hashing[modnum] != compare[i])		{			comp++;			count++;			modnum++;			if(modnum == 40)			{				modnum = 0;			}			if (count == 40)			{				break;			}		}				outFile<<comp << endl; 		avg = avg +comp;	}			avg = (avg/20);	outFile << fixed << showpoint;	outFile << setprecision(2);	outFile << "Average Number of probes: " << avg << endl << endl;		avg = 0;	outFile << "<<<***Unsucc/Division Method***>>>" << endl << endl;	outFile << "ID        Number of Comparison" << endl;	outFile << "-----      --------------------"<< endl;	outFile << fixed << noshowpoint;	outFile << setprecision(0);			for (int i =0; i<20 ; i++)	{		comp =0;		outFile << compareFail[i] << "          ";				int modnum = 0;		modnum = (compareFail[i]%37);		comp++;		int count =0;		while(hashing[modnum] != compareFail[i])		{			if ( hashing[modnum] == -1)			{				break;			}					comp++;			modnum++;			if(modnum == 40)			{				modnum = 0;			}					}				outFile<<comp << endl; 		avg = avg +comp;	}			avg = (avg/20);	outFile << fixed << showpoint;	outFile << setprecision(2);	outFile << "Average Number of probes: " << avg << endl << endl;	}void Search::doublehashingSearch(int compare[], int compareFail[], int doubleHashing[], ofstream& outFile, float& avg, float& comp,float&dhashfail, float& dhashpass   ){	avg = 0;	outFile << "<<<***Succ/ Double Hashing Method***>>>" << endl << endl;	outFile << "ID        Number of Comparison" << endl;	outFile << "-----      --------------------"<< endl;		for (int i =0; i<20 ; i++)	{		comp =0;		outFile << compare[i] << "          ";				int modnum = 0;		modnum = (((compare[i]%37)+((0)*(compare[i]%36)+1))%37);		comp++;		int count =0;		while(doubleHashing[modnum] != compare[i])		{			comp++;			count++;			modnum = (((compare[i]%37)+((count)*(compare[i]%36)+1))%37);			if (count == 40)			{				break;			}		}				outFile<<comp << endl; 		avg = avg +comp;	}			avg = (avg/20);	outFile << fixed << showpoint;	outFile << setprecision(2);	outFile << "Average Number of probes: " << avg << endl << endl;		avg = 0;	outFile << "<<<***Unsucc/ Double Hashing Method***>>>" << endl << endl;	outFile << "ID        Number of Comparison" << endl;	outFile << "-----      --------------------"<< endl;	outFile << fixed << noshowpoint;	outFile << setprecision(0);		for (int i =0; i<20 ; i++)	{		comp =0;		outFile << compareFail[i] << "          ";				int modnum = 0;		modnum = (((compare[i]%37)+((0)*(compare[i]%36)+1))%37);		comp++;		int count =0;		while(doubleHashing[modnum] != compareFail[i])		{			modnum = (((compare[i]%37)+((count)*(compare[i]%36)+1))%37);			if ( doubleHashing[modnum] == -1)			{				break;			}			comp++;			count++;            if (count == 40)			{				break;			}					}				outFile<<comp << endl; 		avg = avg +comp;	}			avg = (avg/20);	outFile << fixed << showpoint;	outFile << setprecision(2);	outFile << "Average Number of probes: " << avg << endl << endl;}