//**************************************************************************** // Author : Michael Gutierrez// Course Title : Computer Programming II // Course Number : CS216// Class Meets : M W / 8:30 - 10:20// Prof Name : Moe Bidgoli// Assignment Number : #9// Due Date : 11-15-15// Possible Points : 20// Purpose : //**************************************************************************** #include <fstream> #include <iostream> #include <string> #include <iomanip> #include "TreeType.h"using namespace std; int main() {  ifstream inFile;  ofstream outFile;  int A = 0;  int B = 0;  int C = 0;  int D = 0;  int E = 0;   int F = 0;   int Total = 0;      inFile.open("in.data");  outFile.open("out.data");      if(inFile.fail() || outFile.fail() )     {       cout << "Input file or output file opening failed" << endl;       return 1;     }		outFile << "<~~~ Binary Tree Report ~~~>" << endl << endl; 		char command, grade, major, gender; 	int id; 	ItemType tempitem; 	TreeType Tree;		while(!inFile.eof())    {	        if (inFile.eof())        {          break;        }	      	  inFile>> command; 	  	  if (command == 'I')	  {		  inFile >> id >> grade >> major >> gender; 		  if (id>= 111 && id <= 999 && (grade == 'A' || grade == 'B' || grade == 'C' || grade == 'D' || grade == 'E' || grade == 'F')			  && (major == 'C' || major == 'I') && (gender == 'M' || gender == 'F'))               {				 if(grade== 'A') A++;                 else if(grade== 'B') B++;		                 else if(grade== 'C') C++;                 else if(grade== 'D') D++;                 else if(grade== 'E') E++;                 else if(grade== 'F') F++;	                 Total ++;			                                   tempitem.setStudent(id, grade, major, gender);                 Tree.InsertItem(tempitem);               }             else                {                  outFile << "****Invalid data: " << id << " " << grade << " " << major << " " << gender << endl << endl;               }	  }	  	  else if (command == 'D')	  {		  inFile >> id; 		  tempitem.setID(id); 		  if (Tree.IsEmpty())		  {			  outFile << id << "---"  <<  "Tree is empty! No delete!" << endl << endl;		  }		  else 		  {			  Tree.DeleteItem(tempitem);		  }	  }	  	  else if (command == 'U')	  {		  inFile >> id >> grade >> major >> gender;		  		  if (id>= 111 && id <= 999 && (grade == 'A' || grade == 'B' || grade == 'C' || grade == 'D' || grade == 'E' || grade == 'F')			  && (major == 'C' || major == 'I') && (gender == 'M' || gender == 'F'))               {				 if(grade== 'A') A--;                 else if(grade== 'B') B--;		                 else if(grade== 'C') C--;                 else if(grade== 'D') D--;                 else if(grade== 'E') E--;                 else if(grade== 'F') F--;	                 Total --;  				                  bool found = false;                 tempitem.setStudent(id, grade, major, gender);				 if (Tree.IsEmpty())		         {			        outFile << id << "---" <<  "Tree is empty! No update!" << endl << endl;		         }		         else 		         {                    Tree.updateTree(tempitem,found);					if (found == false)					{						outFile << id << "---"  << "Not found unable to update!" << endl << endl; 					}		         }               }             else                {                  outFile << "****Invalid update data: " << id << " " << grade << " " << major << " " << gender << endl << endl;               }	  }	  	  else if (command == 'S')	  {		  inFile >> id; 		  tempitem.setID(id);		  		  if (Tree.IsEmpty())		         {			        outFile << id << "---" <<  "Tree is empty! No Search!" << endl << endl;		         }		         else 		         {					bool found = false;                    Tree.RetrieveItem(tempitem,found);					if (found == false)					{						outFile << id << "---"  << "Not found!" << endl << endl; 					}					else					{   string tempmajor; 				        if (tempitem.majoris() == 'C')						{							tempmajor = "Computer Science";						}						else 						{							tempmajor = "Information System";						}						string tempgender; 				        if (tempitem.genderis() == 'C')						{							tempgender = "Male";						}						else 						{							tempgender = "Female";						}						outFile << "Student with "<< tempitem.idis() << " ID Info: "<< tempitem.gradeis() << " - " << 						tempmajor << " - " << tempgender << endl << endl;					}		         }		  	  }	  else if (command == 'P')	  {		  if (Tree.IsEmpty())		  {			outFile <<  "Tree is empty! No Print!" << endl << endl;		  }		  else 		  {			outFile << "Inorder of Tree" << endl << endl; 			outFile << "---------------" << endl << endl;			Tree.PrintInorder(outFile); 			outFile << endl << "Preorder of Tree" << endl << endl; 			outFile << "----------------" << endl << endl;			Tree.PrintPreorder(outFile);			outFile << endl << "Postorder of Tree" << endl << endl; 			outFile << "-----------------" << endl << endl;			Tree.PrintPostorder(outFile);			outFile<< "A: " << ((A/Total)*100)<< "%" << endl;			outFile<< "B: " << ((B/Total)*100)<< "%" << endl;			outFile<< "C: " << ((C/Total)*100)<< "%" << endl;			outFile<< "D: " << ((D/Total)*100)<< "%" << endl;			outFile<< "E: " << ((E/Total)*100)<< "%" << endl;			outFile<< "F: " << ((F/Total)*100)<< "%" << endl<< endl;		  }			  	  }	  else if (command == 'N')	  {		  if (Tree.IsEmpty())		  {			outFile <<  "Tree is empty! No nodes!" << endl << endl;		  }		  else 		  {		    int counter = 0;		    Tree.countNode(counter);			outFile << "Number of Nodes: " << counter << endl << endl;		  }		  	  }	  else if (command == 'H')	  {		  if (Tree.IsEmpty())		  {			outFile <<  "Tree is empty! No height!" << endl << endl;		  }		  else 		  {			  Tree.printHeightofTree(outFile);		  }	  	  }		  	}	 }	