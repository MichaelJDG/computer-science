#include "ItemType.h"struct TreeNode;class TreeType{   public:     TreeType();    // Purpose: Default Constructor     // Input: none    // Pre: none    // Output: none    // Post: item is created.    // Note: none		~TreeType();     // Purpose: Destructor     // Input: none    // Pre: object is created    // Output: none    // Post: item is deleted    // Note: none		TreeType(const TreeType &originalTree);    // Purpose: Copy Constructor to make a deep copy    // Input: originalTree    // Pre: object is created    // Output: TreeType    // Post: deep copy is made    // Note: none	void operator=(const TreeType &originalTree);	// Purpose: To overload operator, recursive function CopyTree to copy tree pointed    // to by originalTree into self     // Input: originalTree    // Pre: onject must exist    // Output: none    // Post: copy is made and operator is overloaded.    // Note: none	bool IsEmpty() const;		// Purpose: Determines if tree is empty     // Input: none    // Pre: tree is created    // Output: bool    // Post: bool is returned true or false    // Note: none	    bool IsFull() const;	// Purpose: To determin if tree is full    // Input: none    // Pre: tree is created    // Output: bool    // Post: bool is returned true or false    // Note: none		void RetrieveItem(ItemType& item, bool& found);	// Purpose: To retrieve ite from tree or if it cant be found    // Input: item , found    // Pre: tree is created    // Output: item , bool    // Post: bool is returned true or false and item may be found    // Note: none	void InsertItem(ItemType item);	// Purpose: To insert item to tree    // Input: item    // Pre: tree is created    // Output: none    // Post: item added to tree    // Note: none	void DeleteItem(ItemType item);    // Purpose: To delete item from tree    // Input: item    // Pre: tree is created, item is in tree    // Output: none    // Post: item is deleted from tree    // Note: none		void PrintInorder(ofstream& outFile) const;	// Purpose: To print values in tree in order    // Input: outFile    // Pre: tree is created    // Output: none    // Post: tree is printed in order    // Note: none    void PrintPreorder(ofstream& outFile) const;	// Purpose: To print values in tree in preorder    // Input: outFile    // Pre: tree is created    // Output: none    // Post: tree is printed in preorder    // Note: none    void PrintPostorder(ofstream& outFile) const;	// Purpose: To print values in tree in postorder    // Input: outFile    // Pre: tree is created    // Output: none    // Post: tree is printed in postorder    // Note: none		void updateTree (ItemType newItem, bool& found, float& A, float& B,float& C,float& D,float& E,float& F);	// Purpose: To update tree item info and change counters    // Input: newitem, found, A,B,C,D,E,F    // Pre: all object are created    // Output: none    // Post: tree is updated if found and values incremented accordingly    // Note: none 		void printHeightofTree(ofstream& outFile) const; 	// Purpose: To print height of tree    // Input: outFile    // Pre: tree is created    // Output: none    // Post: tree height is printed    // Note: none		void countNode(int& numOfNodes); 	// Purpose: To count nodes in tree    // Input numofNodes    // Pre: tree is created    // Output: none    // Post: node number is found    // Note: none	   private:	TreeNode* root;	};