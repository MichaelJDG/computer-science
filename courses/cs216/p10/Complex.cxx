#include <fstream> #include <iostream> #include <string> #include <iomanip>#include "Complex.h"using namespace std;float Complex::O1is () const//Purpose: To return object1//Input:none//Pre: object1 must have a value//output: float//Post: object1 is returned// Note: none{	return Object1;}float Complex::O2is () const//Purpose: To return object2//Input:none//Pre: object2 must have a value//output: float//Post: object2 is returned// Note: none{	return Object2;}void Complex::setobject1(float num)//Purpose: To set a new value to object1//Input:num//Pre: object is created//output: none//Post: new value is set to object1// Note: none{	Object1 = num;}void Complex::setobject2(float num)//Purpose: To set a new value to object2//Input:num//Pre: object is created//output: none//Post: new value is set to object2// Note: none{	Object2 = num;}ofstream& operator<< (ofstream& outFile, const Complex& Complexobject)//Purpose: TO input complew number data into an object//Input:outFile, Complexobject//Pre:Object must be created and stream must be open//output: ofstream//Post:Data is input into object// Note: none{	outFile << "(" << Complexobject.O1is() << ") + (" << Complexobject.O2is()<< ")i"; 	return outFile;}ifstream& operator>> (ifstream& inFile, Complex& Complexobject)//Purpose: To output complex number object//Input: inFile, Complexobject//Pre: stream is ope and object is created with values.//output: ifstream//Post:object is output// Note: none{	float temp1;	float temp2;	inFile >> temp1 >> temp2; 	Complexobject.setobject1(temp1);	Complexobject.setobject2(temp2);		return inFile;}Complex& Complex:: operator+ (const Complex& otherComplex1)//Purpose: To add to complex numbers together//Input: otherComplex1//Pre:both objects must have a value//output: Complex//Post: Numbers are added together// Note: none{	Object1 = (Object1 + otherComplex1.O1is()); 	Object2 = (Object2 + otherComplex1.O2is());		return*this; }Complex& Complex:: operator- (const Complex& otherComplex1)//Purpose: To minus one complex number from another//Input: otherComplex1//Pre: both objects must have values//output: Complex//Post: one complex nuber is minused from another// Note: none{	Object1 = Object1 - otherComplex1.O1is();	Object2 = Object2 - otherComplex1.O2is();		return*this;}Complex& Complex:: operator*(const Complex& otherComplex1)//Purpose: To multiply to complex numbers//Input: otherComplex1//Pre: both objects must have values//output: Complex//Post: Complex numbers are multiplied// Note: none{	Object1 = ((Object1 * otherComplex1.O1is()) - (Object2 * otherComplex1.O2is()));	Object2 = ((Object2 * otherComplex1.O1is()) + (Object1 * otherComplex1.O2is()));		return*this;}Complex& Complex:: operator/(const Complex& otherComplex1)//Purpose: To divide one complex number by another//Input: otherComplex1//Pre: both oobjects must have values and second number can not be equal to zero//output: Complex//Post: One comple number is divided by another// Note: none{	Object1 = (((Object1 * otherComplex1.O1is()) + (Object2 * otherComplex1.O2is()))/	((otherComplex1.O1is() * otherComplex1.O1is())+(otherComplex1.O2is() * otherComplex1.O2is())));		Object2 = (((Object2 * otherComplex1.O1is()) - (Object1 * otherComplex1.O2is()))/	((otherComplex1.O1is() * otherComplex1.O1is())+(otherComplex1.O2is() * otherComplex1.O2is())));		return*this;	}Complex& Complex:: operator++ ()//Purpose: Pre increment complex number//Input: none//Pre: object must have a value//output: Complex//Post: number is pre incremented // Note: none{	Object1 = Object1 +1;	Object2 = Object2 +1;		return*this;}Complex& Complex:: operator++(int)//Purpose: To post increment complex number//Input: int//Pre:object must have a value//output: Complex//Post: number is post incremented// Note: none{	Complex temp = *this;	//Object1 = Object1 +1;	//Object2 = Object2 +1;	//return temp;	return *this;}