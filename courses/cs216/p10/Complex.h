#include <fstream> #include <iostream> #include <string> #include <iomanip>using namespace std; class Complex {    public:		friend ofstream& operator<< (ofstream& outFile, const Complex& Complexobject);	//Purpose: TO input complew number data into an object	//Input:outFile, Complexobject	//Pre:Object must be created and stream must be open	//output: ofstream	//Post:Data is input into object	// Note: none		friend ifstream& operator>> (ifstream& inFile, Complex& Complexobject);	//Purpose: To output complex number object	//Input: inFile, Complexobject	//Pre: stream is ope and object is created with values.	//output: ifstream	//Post:object is output	// Note: none		Complex& operator+ (const Complex& otherComplex1);	//Purpose: To add to complex numbers together	//Input: otherComplex1	//Pre:both objects must have a value	//output: Complex	//Post: Numbers are added together	// Note: none		Complex& operator- (const Complex& otherComplex1);	//Purpose: To minus one complex number from another	//Input: otherComplex1	//Pre: both objects must have values	//output: Complex	//Post: one complex nuber is minused from another	// Note: none		Complex& operator* (const Complex& otherComplex1);	//Purpose: To multiply to complex numbers	//Input: otherComplex1	//Pre: both objects must have values	//output: Complex	//Post: Complex numbers are multiplied	// Note: none		Complex& operator/ (const Complex& otherComplex1);	//Purpose: To divide one complex number by another	//Input: otherComplex1	//Pre: both oobjects must have values and second number can not be equal to zero	//output: Complex	//Post: One comple number is divided by another	// Note: none		Complex& operator++ ();	//Purpose: Pre increment complex number	//Input: none	//Pre: object must have a value	//output: Complex	//Post: number is pre incremented 	// Note: none		Complex& operator++ (int);	//Purpose: To post increment complex number	//Input: int	//Pre:object must have a value	//output: Complex	//Post: number is post incremented	// Note: none		float O1is() const;	//Purpose: To return object1	//Input:none	//Pre: object1 must have a value	//output: float	//Post: object1 is returned	// Note: none		float O2is() const;	//Purpose: To return object2	//Input:none	//Pre: object2 must have a value	//output: float	//Post: object2 is returned	// Note: none		void setobject1(float num);	//Purpose: To set a new value to object1	//Input:num	//Pre: object is created	//output: none	//Post: new value is set to object1	// Note: none		void setobject2(float num);	//Purpose: To set a new value to object2	//Input:num	//Pre: object is created	//output: none	//Post: new value is set to object2	// Note: none		private:		 float  Object1;	 float  Object2;};